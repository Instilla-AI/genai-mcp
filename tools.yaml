sources:
  bigquery-vendite:
    kind: bigquery
    : ${GOOGLE_CLOUD_}
    location: ${BIGQUERY_LOCATION:-US}

tools:
  # Tool principale per NL2SQL con prompt engineering migliorato
  vendite-nl2sql:
    kind: bigquery-execute-sql
    source: bigquery-vendite
    description: >-
      Converte richieste in linguaggio naturale italiano in query SQL BigQuery per analisi vendite.
      
      SCHEMA COMPLETO:
      Dataset: vendite_dataset
      Tabella: vendite 
      Colonne:
      - id (INT64): ID univoco vendita
      - data_vendita (DATE): Data vendita (formato: YYYY-MM-DD)
      - prodotto (STRING): Nome prodotto (Laptop, Mouse, Tastiera, Monitor)
      - quantita (INT64): Quantità venduta
      - prezzo_unitario (FLOAT64): Prezzo per unità in Euro
      - totale (FLOAT64): Totale vendita (quantita * prezzo_unitario)
      - cliente (STRING): Nome cliente (Cliente A, Cliente B, etc.)
      - regione (STRING): Regione geografica (Nord, Sud, Centro)
      
      ESEMPI DI CONVERSIONE:
      Input: "vendite dal 9 giugno al 15 giugno 2025"
      SQL: SELECT * FROM `${GOOGLE_CLOUD_}.vendite_dataset.vendite` 
           WHERE data_vendita BETWEEN '2025-06-09' AND '2025-06-15' 
           ORDER BY data_vendita DESC
      
      Input: "totale vendite per prodotto"  
      SQL: SELECT prodotto, SUM(totale) as totale_vendite, COUNT(*) as numero_vendite
           FROM `${GOOGLE_CLOUD_PROJECT}.vendite_dataset.vendite`
           GROUP BY prodotto ORDER BY totale_vendite DESC
      
      Input: "clienti con più acquisti"
      SQL: SELECT cliente, COUNT(*) as numero_acquisti, SUM(totale) as totale_speso
           FROM `${GOOGLE_CLOUD_PROJECT}.vendite_dataset.vendite`
           GROUP BY cliente ORDER BY numero_acquisti DESC
      
      Input: "statistiche per regione"
      SQL: SELECT regione, COUNT(*) as vendite, SUM(totale) as fatturato, AVG(totale) as media
           FROM `${GOOGLE_CLOUD_PROJECT}.vendite_dataset.vendite`
           GROUP BY regione ORDER BY fatturato DESC
      
      REGOLE IMPORTANTI:
      - Usa sempre il project_id completo: ${GOOGLE_CLOUD_PROJECT}.vendite_dataset.vendite
      - Date in formato ISO: YYYY-MM-DD
      - Ordinamenti significativi (per data, totale, etc.)
      - Aggregazioni con alias leggibili in italiano
      - SEMPRE filtra per date realistiche quando richiesto
      - Rispondi SOLO con la query SQL, senza spiegazioni extra
      
    parameters:
      - name: natural_language_query
        type: string
        description: >-
          Richiesta dell'utente in linguaggio naturale italiano.
          Esempi: "vendite dal 9 al 15 giugno", "prodotti più venduti", 
          "fatturato per regione", "cliente migliore"

  # Tool per informazioni schema
  schema-info:
    kind: bigquery-get-table-info
    source: bigquery-vendite
    description: >-
      Ottieni informazioni dettagliate sullo schema delle tabelle BigQuery.
      Utile per verificare struttura, tipi di dati e metadati.
    parameters:
      - name: dataset_id
        type: string
        description: ID del dataset BigQuery (es. vendite_dataset)
      - name: table_id  
        type: string
        description: ID della tabella BigQuery (es. vendite)

  # Tool per ottenere liste di dataset
  list-datasets:
    kind: bigquery-list-dataset-ids
    source: bigquery-vendite
    description: >-
      Lista tutti i dataset disponibili nel progetto BigQuery.
      Utile per esplorare la struttura dati disponibile.

  # Tool per ottenere liste di tabelle
  list-tables:
    kind: bigquery-list-table-ids
    source: bigquery-vendite
    description: >-
      Lista tutte le tabelle in un dataset BigQuery specifico.
    parameters:
      - name: dataset_id
        type: string
        description: ID del dataset di cui elencare le tabelle

  # Tool per query predefinite veloci
  vendite-periodo-rapido:
    kind: bigquery-sql
    source: bigquery-vendite
    description: >-
      Query predefinita per ottenere vendite in un periodo con statistiche rapide.
      Ottimizzata per performance con dati pre-aggregati.
    parameters:
      - name: data_inizio
        type: string
        description: Data inizio nel formato YYYY-MM-DD
      - name: data_fine
        type: string
        description: Data fine nel formato YYYY-MM-DD
    statement: >-
      SELECT 
        data_vendita,
        prodotto,
        quantita,
        prezzo_unitario,
        totale,
        cliente,
        regione,
        -- Statistiche aggiuntive
        SUM(totale) OVER (PARTITION BY prodotto) as totale_prodotto,
        RANK() OVER (ORDER BY totale DESC) as rank_vendita
      FROM `${GOOGLE_CLOUD_}.vendite_dataset.vendite`
      WHERE data_vendita BETWEEN @data_inizio AND @data_fine
      ORDER BY data_vendita DESC, totale DESC

  # Tool per dashboard vendite
  dashboard-vendite:
    kind: bigquery-sql
    source: bigquery-vendite
    description: >-
      Query dashboard completa con tutte le metriche principali di vendita.
      Include KPI aggregati per reporting esecutivo.
    statement: >-
      WITH vendite_summary AS (
        SELECT 
          COUNT(*) as totale_vendite,
          SUM(totale) as fatturato_totale,
          AVG(totale) as valore_medio_vendita,
          MIN(data_vendita) as prima_vendita,
          MAX(data_vendita) as ultima_vendita,
          COUNT(DISTINCT cliente) as clienti_unici,
          COUNT(DISTINCT prodotto) as prodotti_venduti,
          COUNT(DISTINCT regione) as regioni_attive
        FROM `${GOOGLE_CLOUD_}.vendite_dataset.vendite`
      ),
      top_prodotti AS (
        SELECT 
          prodotto,
          SUM(totale) as fatturato,
          COUNT(*) as vendite
        FROM `${GOOGLE_CLOUD_}.vendite_dataset.vendite`
        GROUP BY prodotto
        ORDER BY fatturato DESC
        LIMIT 3
      ),
      top_clienti AS (
        SELECT 
          cliente,
          SUM(totale) as spesa_totale,
          COUNT(*) as numero_acquisti
        FROM `${GOOGLE_CLOUD_}.vendite_dataset.vendite`
        GROUP BY cliente
        ORDER BY spesa_totale DESC
        LIMIT 3
      )
      SELECT 
        'DASHBOARD_VENDITE' as tipo_report,
        CURRENT_DATETIME() as generato_il,
        (SELECT * FROM vendite_summary) as metriche_generali,
        ARRAY(SELECT AS STRUCT * FROM top_prodotti) as top_prodotti,
        ARRAY(SELECT AS STRUCT * FROM top_clienti) as top_clienti

toolsets:
  # Toolset principale per assistente vendite
  vendite-assistant:
    - vendite-nl2sql
    - schema-info
    - list-datasets
    - list-tables
    - vendite-periodo-rapido
    - dashboard-vendite

  # Toolset semplificato per query veloci
  vendite-quick:
    - vendite-nl2sql
    - vendite-periodo-rapido

  # Toolset per amministratori
  vendite-admin:
    - schema-info
    - list-datasets
    - list-tables
    - dashboard-vendite
